version: 2.1
jobs:
  set_up_test_deploy:
    steps:
      - checkout
      - run:
          name: Update package lists before installing dependencies
          command: sudo apt-get update

      - run:
          name: Install dependencies
          command: sudo sh bin/setup/install_dependencies.sh

      - run:
          name: Install Flake8 style guide checker
          command: sudo apt-get install flake8

      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "ZOOM/requirements.txt" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-
      - run:
          name: Create virtual environment before doing anything
          command: python3 -m venv env

      - run:
          name: Install main dependencies
          command: |
            . env/bin/activate
            pip install -r ZOOM/requirements.txt

      - save_cache:
          paths:
            - ./env
          key: v1-dependencies-{{ checksum "ZOOM/requirements.txt" }}

      - run:
          name: Run Pytest tests
          command: |
            . env/bin/activate
            # Run tests and generate test coverage report:
            ./ZOOM/manage.py test

      - store_artifacts:
          path: test-reports
          destination: test-reports

      - run:
          name: Run pep8 code style checks
          command: |
            . env/bin/activate
            flake8 ZOOM

      - add_ssh_keys:
          name: Add SSH KEY
          fingerprints:
            - "2e:df:ac:b8:9a:6b:d8:88:a4:ea:ff:77:dd:9a:45:a3"
            - run: eval ssh-agent -s

      - run:
          name: Update DUCT
          command: |
            if [ "${CIRCLE_BRANCH}" == "master" ]; then
              ssh "$SSH_USER"@"$SSH_HOST_STAGING" "source envs/zoom/bin/activate; cd DUCT/ZOOM/; git pull; pip install -r requirements.txt; ./manage.py migrate; echo '"$SSH_STAGING_PASS"' | sudo -S service supervisor restart"
            elif [ "${CIRCLE_BRANCH}" == "develop" ]; then
              ssh "$SSH_USER"@"$SSH_HOST_DEV" "source .env/bin/activate; cd DUCT/ZOOM/; git pull; pip install -r requirements.txt; ./manage.py migrate; echo '"$SSH_DEV_PASS"' | sudo -S service supervisor restart"
            elif [ "${CIRCLE_BRANCH}" == "production" ]; then
              ssh "$SSH_USER"@"$SSH_HOST_PROD" "cd DUCT/; source env/bin/activate; cd ZOOM/; git pull; pip install -r requirements.txt; ./manage.py migrate; echo '"$SSH_PROD_PASS"' | sudo -S service supervisor restart"
            fi